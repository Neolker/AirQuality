[
    {
        "id": "18c6f6f8543c7a4b",
        "type": "tab",
        "label": "Flow 1"
    },
    {
        "id": "1410407f34700706",
        "type": "group",
        "z": "18c6f6f8543c7a4b",
        "name": "Dashboard",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "fill-opacity": "0.6",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "de98ea6f30f20f51",
            "b07fd867a171c392",
            "a5bc5d7e6adc48f2",
            "5c247d86d334d24f",
            "46ca59b4d982b9c3"
        ],
        "x": 374,
        "y": 19,
        "w": 212,
        "h": 242
    },
    {
        "id": "2bf41e09bc421d94",
        "type": "group",
        "z": "18c6f6f8543c7a4b",
        "name": "MQTT Inputs",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "fill-opacity": "0.5",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "836798d8e7c8198e",
            "44dbb6000a58e15a",
            "f96677ce273f3dda",
            "505e10facb35235b",
            "4c70e7e51814dfc8"
        ],
        "x": 14,
        "y": 19,
        "w": 212,
        "h": 322
    },
    {
        "id": "8f89c9f6d6bbc295",
        "type": "group",
        "z": "18c6f6f8543c7a4b",
        "name": "Data retention in Buffer DB",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffefbf",
            "fill-opacity": "0.5",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "149d6d9cdf8b9079",
            "1564fadbea475df3",
            "662ff4ccbea17096",
            "714229fc088d4a13",
            "0f25295ec00f9198",
            "e3e51425a73a3973",
            "6180af51372a13cc",
            "92e94f9181bd95bd"
        ],
        "x": 374,
        "y": 299,
        "w": 892,
        "h": 242
    },
    {
        "id": "7f02aa8f2533d063",
        "type": "group",
        "z": "18c6f6f8543c7a4b",
        "name": "AVG and trends from buffer to main data",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "d880b7cb43f7441a",
            "31eeab91db67fd30",
            "6d49537fe0eec219",
            "2bd554afbb012e9a",
            "070c6cc949da5666",
            "1bff037f0675e8c7",
            "a9d0d759108d0f51",
            "ec9cbd59d4cd02a5"
        ],
        "x": 14,
        "y": 579,
        "w": 852,
        "h": 142
    },
    {
        "id": "0f1893f389d3821c",
        "type": "group",
        "z": "18c6f6f8543c7a4b",
        "name": "Send data into BE",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "c9985d45cb56457f",
            "7f9eaec6dac49e3c",
            "6755f25d210c49e0",
            "5e0a1406424a7b3b",
            "a6ef353135ecf8ed",
            "353ebf73d5af3604",
            "3d0d18a57ba3daef",
            "9424e5c28785bc5b",
            "193ed93135d26418"
        ],
        "x": 14,
        "y": 759,
        "w": 1132,
        "h": 142
    },
    {
        "id": "29fba84a.b2af58",
        "type": "mqtt-broker",
        "name": "",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "bf6a3c96.35048",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "11207769.c31889",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard"
    },
    {
        "id": "57ff470b.93fdf8",
        "type": "ui_group",
        "name": "AirQuality",
        "tab": "11207769.c31889",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "aaf3d3de7c4e5dd8",
        "type": "MySQLdatabase",
        "name": "AirQualityHubDB",
        "host": "localhost",
        "port": "3306",
        "db": "air_quiality_hub",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "6cf82e37.9a1db",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "sys",
        "tz": "",
        "charset": ""
    },
    {
        "id": "ef3d1f53.8d09a",
        "type": "mqtt-broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "NodeRedUI",
        "usetls": false,
        "compatmode": true,
        "keepalive": "15",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "7b11ed0f.750644",
        "type": "ui_group",
        "name": "MQTT",
        "tab": "670bfbe.e66d904",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "ad2ac2df.6f4bf",
        "type": "ui_group",
        "name": "Context",
        "tab": "670bfbe.e66d904",
        "order": 2,
        "disp": true,
        "width": "6"
    },
    {
        "id": "670bfbe.e66d904",
        "type": "ui_tab",
        "name": "Demo",
        "icon": "dashboard"
    },
    {
        "id": "149d6d9cdf8b9079",
        "type": "debug",
        "z": "18c6f6f8543c7a4b",
        "g": "8f89c9f6d6bbc295",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 420,
        "wires": []
    },
    {
        "id": "1564fadbea475df3",
        "type": "mysql",
        "z": "18c6f6f8543c7a4b",
        "g": "8f89c9f6d6bbc295",
        "mydb": "aaf3d3de7c4e5dd8",
        "name": "",
        "x": 950,
        "y": 420,
        "wires": [
            [
                "149d6d9cdf8b9079"
            ]
        ]
    },
    {
        "id": "836798d8e7c8198e",
        "type": "mqtt in",
        "z": "18c6f6f8543c7a4b",
        "g": "2bf41e09bc421d94",
        "name": "CO2",
        "topic": "node/generic-node:0/co2-meter/-/concentration",
        "qos": "2",
        "datatype": "json",
        "broker": "29fba84a.b2af58",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 180,
        "wires": [
            [
                "de98ea6f30f20f51",
                "714229fc088d4a13"
            ]
        ]
    },
    {
        "id": "44dbb6000a58e15a",
        "type": "mqtt in",
        "z": "18c6f6f8543c7a4b",
        "g": "2bf41e09bc421d94",
        "name": "BatteryVoltage",
        "topic": "node/generic-node:0/battery/-/voltage",
        "qos": "2",
        "datatype": "json",
        "broker": "29fba84a.b2af58",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 60,
        "wires": [
            [
                "a5bc5d7e6adc48f2",
                "e3e51425a73a3973"
            ]
        ]
    },
    {
        "id": "f96677ce273f3dda",
        "type": "mqtt in",
        "z": "18c6f6f8543c7a4b",
        "g": "2bf41e09bc421d94",
        "name": "SerialNumber",
        "topic": "node/generic-node:0/serial",
        "qos": "2",
        "datatype": "json",
        "broker": "29fba84a.b2af58",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 120,
        "wires": [
            [
                "b07fd867a171c392",
                "0f25295ec00f9198"
            ]
        ]
    },
    {
        "id": "de98ea6f30f20f51",
        "type": "ui_gauge",
        "z": "18c6f6f8543c7a4b",
        "g": "1410407f34700706",
        "name": "CO2",
        "group": "57ff470b.93fdf8",
        "order": 0,
        "width": "0",
        "height": "0",
        "gtype": "gage",
        "title": "CO2",
        "label": "ppm",
        "format": "{{value}} ppm",
        "min": 0,
        "max": "3000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "500",
        "seg2": "1000",
        "diff": false,
        "className": "",
        "x": 450,
        "y": 140,
        "wires": []
    },
    {
        "id": "b07fd867a171c392",
        "type": "ui_text",
        "z": "18c6f6f8543c7a4b",
        "g": "1410407f34700706",
        "group": "57ff470b.93fdf8",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "Serial Number",
        "label": "Serial Number",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 480,
        "y": 100,
        "wires": []
    },
    {
        "id": "a5bc5d7e6adc48f2",
        "type": "ui_text",
        "z": "18c6f6f8543c7a4b",
        "g": "1410407f34700706",
        "group": "57ff470b.93fdf8",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Battery Voltage",
        "label": "Battery Voltage",
        "format": "{{msg.payload}} V",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 480,
        "y": 60,
        "wires": []
    },
    {
        "id": "662ff4ccbea17096",
        "type": "function",
        "z": "18c6f6f8543c7a4b",
        "g": "8f89c9f6d6bbc295",
        "name": "Create new line into buffer",
        "func": "let bat=global.get(\"battery\");\nlet co2 = global.get(\"co2\");\nlet temp = global.get(\"temperature\");\nlet pos = global.get(\"position\");\nlet serial = \"undefined\";\nlet serialGlobal = global.get(\"serial\");\nif (serialGlobal.length>5){\n    serial = serialGlobal;\n    }\nmsg.topic = \"INSERT INTO buffer (ts,serial_number,co2,temperature,humidity,battery,position) VALUES (?,?,?,?,?,?,?)\";\nmsg.payload=[Math.floor(Date.now() / 1000),serial,co2,temp,0,bat,pos];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 420,
        "wires": [
            [
                "1564fadbea475df3"
            ]
        ]
    },
    {
        "id": "714229fc088d4a13",
        "type": "function",
        "z": "18c6f6f8543c7a4b",
        "g": "8f89c9f6d6bbc295",
        "name": "Global co2 set",
        "func": "global.set(\"co2\",  parseFloat(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 420,
        "wires": [
            [
                "662ff4ccbea17096"
            ]
        ]
    },
    {
        "id": "0f25295ec00f9198",
        "type": "function",
        "z": "18c6f6f8543c7a4b",
        "g": "8f89c9f6d6bbc295",
        "name": "Global serial set",
        "func": "global.set(\"serial\",  msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "d880b7cb43f7441a",
        "type": "debug",
        "z": "18c6f6f8543c7a4b",
        "g": "7f02aa8f2533d063",
        "name": "msg.payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 680,
        "wires": []
    },
    {
        "id": "31eeab91db67fd30",
        "type": "function",
        "z": "18c6f6f8543c7a4b",
        "g": "7f02aa8f2533d063",
        "name": "SELECT buffer",
        "func": "msg.topic = \"SELECT * FROM buffer ORDER BY ts ASC\";\nmsg.payload=[];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 620,
        "wires": [
            [
                "2bd554afbb012e9a"
            ]
        ]
    },
    {
        "id": "6d49537fe0eec219",
        "type": "inject",
        "z": "18c6f6f8543c7a4b",
        "g": "7f02aa8f2533d063",
        "name": "Timer 6 min.",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "365",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 140,
        "y": 620,
        "wires": [
            [
                "31eeab91db67fd30"
            ]
        ]
    },
    {
        "id": "e3e51425a73a3973",
        "type": "function",
        "z": "18c6f6f8543c7a4b",
        "g": "8f89c9f6d6bbc295",
        "name": "Global battery set",
        "func": "global.set(\"battery\",  parseFloat(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "2bd554afbb012e9a",
        "type": "mysql",
        "z": "18c6f6f8543c7a4b",
        "g": "7f02aa8f2533d063",
        "mydb": "aaf3d3de7c4e5dd8",
        "name": "",
        "x": 510,
        "y": 620,
        "wires": [
            [
                "070c6cc949da5666"
            ]
        ]
    },
    {
        "id": "070c6cc949da5666",
        "type": "function",
        "z": "18c6f6f8543c7a4b",
        "g": "7f02aa8f2533d063",
        "name": "Insert into main data",
        "func": "let battery=0;\nlet position=0;\n//co2\nlet trend_co2=0;\nlet last_co2=0;\nlet sum_co2=0;\nlet count_co2=0;\nlet avg_co2=0;\nlet serial=\"xxx\";\n//temp\nlet trend_temp=0;\nlet last_temp=0;\nlet sum_temp=0;\nlet count_temp=0;\nlet avg_temp=0;\nif(msg.payload.length > 0){\n    msg.payload.forEach((element) => {     \n        //batt\n        battery=element.battery;\n        //co2\n        if(last_co2<element.co2){trend_co2=1;}\n        else if(last_co2>element.co2){trend_co2=(-1);}   \n        else{trend_co2=0;}\n        last_co2=element.co2;\n        sum_co2+=element.co2;         \n        count_co2++;\n        //temp\n        if(last_temp<element.temperature){trend_temp=1;}\n        else if(last_temp>element.temperature){trend_temp=(-1);}   \n        else{trend_temp=0;}\n        last_temp=element.temperature;\n        sum_temp+=element.temperature;         \n        count_temp++;\n        //serial\n        serial=element.serial_number;     \n        //position\n        position=element.position;\n        });\n    if(count_co2>0){\n        avg_co2=(sum_co2/count_co2);\n        }\n    if (count_temp >0){\n        avg_temp = (sum_temp / count_temp);\n        }\n    }\nmsg.topic = \"INSERT INTO main_data (unix_ts,serial_number,co2_avg,co2_trend,temp_avg,temp_trend,battery,position) VALUES (?,?,?,?,?,?,?,?)\";\nmsg.payload = [Math.floor(Date.now() / 1000), serial, avg_co2, trend_co2, avg_temp, trend_temp,battery,position];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 620,
        "wires": [
            [
                "1bff037f0675e8c7"
            ]
        ]
    },
    {
        "id": "1bff037f0675e8c7",
        "type": "mysql",
        "z": "18c6f6f8543c7a4b",
        "g": "7f02aa8f2533d063",
        "mydb": "aaf3d3de7c4e5dd8",
        "name": "",
        "x": 150,
        "y": 680,
        "wires": [
            [
                "a9d0d759108d0f51"
            ]
        ]
    },
    {
        "id": "a9d0d759108d0f51",
        "type": "function",
        "z": "18c6f6f8543c7a4b",
        "g": "7f02aa8f2533d063",
        "name": "clear buffer",
        "func": "msg.topic = \"TRUNCATE buffer\";\nmsg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 680,
        "wires": [
            [
                "ec9cbd59d4cd02a5"
            ]
        ]
    },
    {
        "id": "ec9cbd59d4cd02a5",
        "type": "mysql",
        "z": "18c6f6f8543c7a4b",
        "g": "7f02aa8f2533d063",
        "mydb": "aaf3d3de7c4e5dd8",
        "name": "",
        "x": 550,
        "y": 680,
        "wires": [
            [
                "d880b7cb43f7441a"
            ]
        ]
    },
    {
        "id": "505e10facb35235b",
        "type": "mqtt in",
        "z": "18c6f6f8543c7a4b",
        "g": "2bf41e09bc421d94",
        "name": "Temperature",
        "topic": "node/generic-node:0/thermometer/0:1/temperature",
        "qos": "2",
        "datatype": "json",
        "broker": "29fba84a.b2af58",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 240,
        "wires": [
            [
                "5c247d86d334d24f",
                "6180af51372a13cc"
            ]
        ]
    },
    {
        "id": "5c247d86d334d24f",
        "type": "ui_gauge",
        "z": "18c6f6f8543c7a4b",
        "g": "1410407f34700706",
        "name": "Temperature",
        "group": "57ff470b.93fdf8",
        "order": 0,
        "width": "0",
        "height": "0",
        "gtype": "gage",
        "title": "Temperature",
        "label": "°C",
        "format": "{{value}} °C",
        "min": "0",
        "max": "40",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "25",
        "seg2": "30",
        "diff": false,
        "className": "",
        "x": 470,
        "y": 180,
        "wires": []
    },
    {
        "id": "6180af51372a13cc",
        "type": "function",
        "z": "18c6f6f8543c7a4b",
        "g": "8f89c9f6d6bbc295",
        "name": "Global temperature set",
        "func": "global.set(\"temperature\",  parseFloat(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "4c70e7e51814dfc8",
        "type": "mqtt in",
        "z": "18c6f6f8543c7a4b",
        "g": "2bf41e09bc421d94",
        "name": "Position",
        "topic": "node/generic-node:0/orientation",
        "qos": "2",
        "datatype": "json",
        "broker": "29fba84a.b2af58",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 300,
        "wires": [
            [
                "46ca59b4d982b9c3",
                "92e94f9181bd95bd"
            ]
        ]
    },
    {
        "id": "46ca59b4d982b9c3",
        "type": "ui_gauge",
        "z": "18c6f6f8543c7a4b",
        "g": "1410407f34700706",
        "name": "Position",
        "group": "57ff470b.93fdf8",
        "order": 0,
        "width": "0",
        "height": "0",
        "gtype": "compass",
        "title": "Position",
        "label": "",
        "format": "{{value}}",
        "min": "1",
        "max": "6",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "20",
        "seg2": "25",
        "diff": false,
        "className": "",
        "x": 460,
        "y": 220,
        "wires": []
    },
    {
        "id": "92e94f9181bd95bd",
        "type": "function",
        "z": "18c6f6f8543c7a4b",
        "g": "8f89c9f6d6bbc295",
        "name": "Global position set",
        "func": "global.set(\"position\",  parseInt(msg.payload)-1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "c9985d45cb56457f",
        "type": "inject",
        "z": "18c6f6f8543c7a4b",
        "g": "0f1893f389d3821c",
        "name": "Timer 30 sec",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 140,
        "y": 800,
        "wires": [
            [
                "6755f25d210c49e0"
            ]
        ]
    },
    {
        "id": "7f9eaec6dac49e3c",
        "type": "debug",
        "z": "18c6f6f8543c7a4b",
        "g": "0f1893f389d3821c",
        "name": "msg.payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 860,
        "wires": []
    },
    {
        "id": "6755f25d210c49e0",
        "type": "function",
        "z": "18c6f6f8543c7a4b",
        "g": "0f1893f389d3821c",
        "name": "SELECT main data",
        "func": "msg.topic = \"SELECT * FROM main_data WHERE send=0 ORDER BY unix_ts ASC LIMIT 1\";\nmsg.payload=[];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 800,
        "wires": [
            [
                "5e0a1406424a7b3b"
            ]
        ]
    },
    {
        "id": "5e0a1406424a7b3b",
        "type": "mysql",
        "z": "18c6f6f8543c7a4b",
        "g": "0f1893f389d3821c",
        "mydb": "aaf3d3de7c4e5dd8",
        "name": "",
        "x": 570,
        "y": 800,
        "wires": [
            [
                "a6ef353135ecf8ed"
            ]
        ]
    },
    {
        "id": "a6ef353135ecf8ed",
        "type": "function",
        "z": "18c6f6f8543c7a4b",
        "g": "0f1893f389d3821c",
        "name": "Insert into main data",
        "func": "let dataUpdate={\n        \"serial\": \"xxxx-xxxx-xxxx-xxxx-xxxx\",\n        \"data\": [\n            {\n                \"unix-time\": 0, \n                \"co2-avg\": 0.0, \n                \"co2-trend\": 0, \n                \"co2-unit\": \"ppm\",\n                \"temp-avg\": 0.0,\n                \"temp-trend\": 0,\n                \"temp-unit\": \"°C\",\n                \"humi-avg\": 0.0, \n                \"humi-trend\": 0, \n                \"humi-unit\": \"%RH\",\n                \"batt-avg\": 0.0, \n                \"batt-unit\": \"V\",\n                \"position\": 0\n            }\n        ]\n    };\nif(msg.payload.length > 0){\n    msg.payload.forEach((element) => {     \n        dataUpdate={\n                \"serial\": element.serial_number,\n                \"data\": [\n                    {\n                        \"unix-time\": element.unix_ts, \n                        \"co2-avg\": element.co2_avg, \n                        \"co2-trend\": element.co2_trend, \n                        \"co2-unit\": \"ppm\",\n                        \"temp-avg\": element.temp_avg,\n                        \"temp-trend\": element.temp_trend,\n                        \"temp-unit\": \"°C\",\n                        \"humi-avg\":  element.humi_avg, \n                        \"humi-trend\": element.humi_trend, \n                        \"humi-unit\": \"%RH\",\n                        \"batt-avg\": element.battery, \n                        \"batt-unit\": \"V\",\n                        \"position\": element.position\n                    }\n                ]\n            };\n        });    \n    }\nmsg.payload = dataUpdate;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 800,
        "wires": [
            [
                "353ebf73d5af3604"
            ]
        ]
    },
    {
        "id": "353ebf73d5af3604",
        "type": "http request",
        "z": "18c6f6f8543c7a4b",
        "g": "0f1893f389d3821c",
        "name": "Send data into BE",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://air-quality-b.tes-t.cz/data-update/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 150,
        "y": 860,
        "wires": [
            [
                "3d0d18a57ba3daef"
            ]
        ]
    },
    {
        "id": "3d0d18a57ba3daef",
        "type": "function",
        "z": "18c6f6f8543c7a4b",
        "g": "0f1893f389d3821c",
        "name": "Returned data",
        "func": "let unixts=0;\nlet result=msg.payload;\nlet resultDecoded = JSON.parse(result);\nif(resultDecoded.data[0].status===\"OK\"&&resultDecoded.data[0][\"unix-time\"]>0){\n\tunixts=parseInt(resultDecoded.data[0][\"unix-time\"]);\n\t}\nmsg.payload=unixts;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 860,
        "wires": [
            [
                "9424e5c28785bc5b"
            ]
        ]
    },
    {
        "id": "9424e5c28785bc5b",
        "type": "function",
        "z": "18c6f6f8543c7a4b",
        "g": "0f1893f389d3821c",
        "name": "Delete inserted line",
        "func": "let tsx=msg.payload;\nmsg.topic = \"UPDATE main_data SET send=1 WHERE send=0 AND unix_ts='\"+tsx+\"' ORDER BY unix_ts ASC LIMIT 1\";\nmsg.payload=[];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 860,
        "wires": [
            [
                "193ed93135d26418"
            ]
        ]
    },
    {
        "id": "193ed93135d26418",
        "type": "mysql",
        "z": "18c6f6f8543c7a4b",
        "g": "0f1893f389d3821c",
        "mydb": "aaf3d3de7c4e5dd8",
        "name": "",
        "x": 810,
        "y": 860,
        "wires": [
            [
                "7f9eaec6dac49e3c"
            ]
        ]
    }
]
